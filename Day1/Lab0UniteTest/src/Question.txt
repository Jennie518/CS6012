1.Where is the assertEquals method defined? What does it do? Can we use assertEquals for more than just int types? (Hint: Consult the API for JUnit)

   defined in import static org.junit.jupiter.api.Assertions.*;
   Assert that expected and actual are equal.
   Yes, can use byte,char, long and so on.


2.Briefly describe what each of the three tests is checking.

    emptyArray(): This test is checking the behavior of the findSmallestDiff method when it is given an empty array. According to the method specification, if the array contains less than two items, it should return -1. Therefore, this test asserts that the method returns -1 for an empty array, ensuring that the method handles the case of insufficient data correctly.
    allArrayElementsEqual(): This test checks how the method behaves when all elements in the array are equal. In such a scenario, the smallest difference between any two elements would be 0 because the subtraction of any number by itself is 0. The test asserts that the method returns 0 when all array elements are the same.
    smallRandomArrayElements(): This test verifies the method's functionality with an array that has a small number of random elements. The test provides a specific array and checks whether the method correctly calculates the smallest difference between any pair of integers in the array. The expected result (the smallest difference) is provided, and the test asserts that the method returns this value

3.Why is our unimplemented findSmallestDiff method passing one of the tests?

    The test allArrayElementsEqual may pass with an unimplemented findSmallestDiff method if it returns 0, which is the expected result for an array of equal elements.


4.Why are we failing the third test? How should our method be modified to correct this?

    Because the diff might be negative, -8 is less than 4, we need to use abs() to make sure all diff is positive.

5.What is the appropriate call to assertEquals for your new test (test 4)?

     int[] arr4 = new int[] { 1, 3, -8, 0};
     assertEquals(1, DiffUtil.findSmallestDiff(arr4));

6.Provide one more test (test 5) for the findSmallestDiff method. Briefly describe your test and write the call to assertEquals here.

    int[] arr5 = new int[] {-5, -10, -15, -20};
    assertEquals(5, DiffUtil.findSmallestDiff(arr5));
    This test checks if the method is robust against negative values and whether it can handle a sequence where the natural ordering of numbers provides the smallest difference.

7.Briefly describe your unit tests for Assignment 1.

	Setup Method: Initializes common test images before each test. Ensures fresh images for every test case to prevent side effects.
	
	Boundary Condition Testing: Verifies that the getPixel method returns correct values at the edges of the image, which are critical for image processing.
	
	Out of Bounds Testing: Ensures that an exception is thrown when trying to access pixels outside the image boundaries, preventing invalid array access.
	
	 Equality Testing: Checks that the equals method properly identifies when two GrayscaleImage objects are not the same, which includes comparing to objects of different types and checking for small pixel value differences.
	
	Average Brightness Testing: Confirms that the averageBrightness method accurately calculates the average for images with both fractional and single-pixel values.

	 Normalization Testing: Validates that the normalized method does not alter an image that already has the target average brightness and that it correctly normalizes wide images.
	
	Mirroring Testing: Tests the mirrored method on both single row and wide images to ensure it reverses the pixels correctly across the y-axis.
	
	Cropping Testing: Ensures that the cropped method returns the correct sub-image when given a single pixel or a specific section and that it throws an exception for invalid crop dimensions.
	
	Squarification Testing: Checks the squarified method on both already square and wide images to confirm it results in a proper square image, either by leaving it unchanged or cropping excess columns.